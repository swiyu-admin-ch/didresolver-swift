// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(did_sidekicksFFI)
import did_sidekicksFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_did_sidekicks_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_did_sidekicks_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureDidSidekicksInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol DidDocProtocol: AnyObject, Sendable {
    
    func getAssertionMethod()  -> [VerificationMethod]
    
    func getAuthentication()  -> [VerificationMethod]
    
    func getCapabilityDelegation()  -> [VerificationMethod]
    
    func getCapabilityInvocation()  -> [VerificationMethod]
    
    func getContext()  -> [String]
    
    func getController()  -> [String]
    
    func getDeactivated()  -> Bool
    
    func getId()  -> String
    
    func getVerificationMethod()  -> [VerificationMethod]
    
}
open class DidDoc: DidDocProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_did_sidekicks_fn_clone_diddoc(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_did_sidekicks_fn_free_diddoc(pointer, $0) }
    }

    
public static func fromJson(jsonContent: String)throws  -> DidDoc  {
    return try  FfiConverterTypeDidDoc_lift(try rustCallWithError(FfiConverterTypeDidSidekicksError_lift) {
    uniffi_did_sidekicks_fn_constructor_diddoc_from_json(
        FfiConverterString.lower(jsonContent),$0
    )
})
}
    

    
open func getAssertionMethod() -> [VerificationMethod]  {
    return try!  FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddoc_get_assertion_method(self.uniffiClonePointer(),$0
    )
})
}
    
open func getAuthentication() -> [VerificationMethod]  {
    return try!  FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddoc_get_authentication(self.uniffiClonePointer(),$0
    )
})
}
    
open func getCapabilityDelegation() -> [VerificationMethod]  {
    return try!  FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddoc_get_capability_delegation(self.uniffiClonePointer(),$0
    )
})
}
    
open func getCapabilityInvocation() -> [VerificationMethod]  {
    return try!  FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddoc_get_capability_invocation(self.uniffiClonePointer(),$0
    )
})
}
    
open func getContext() -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddoc_get_context(self.uniffiClonePointer(),$0
    )
})
}
    
open func getController() -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddoc_get_controller(self.uniffiClonePointer(),$0
    )
})
}
    
open func getDeactivated() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddoc_get_deactivated(self.uniffiClonePointer(),$0
    )
})
}
    
open func getId() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddoc_get_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func getVerificationMethod() -> [VerificationMethod]  {
    return try!  FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddoc_get_verification_method(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidDoc: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DidDoc

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DidDoc {
        return DidDoc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DidDoc) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidDoc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DidDoc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> DidDoc {
    return try FfiConverterTypeDidDoc.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidDoc_lower(_ value: DidDoc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDidDoc.lower(value)
}






/**
 * A simple container for both `DidDoc` and the related collection of `DidMethodParameter` objects.
 */
public protocol DidDocExtendedProtocol: AnyObject, Sendable {
    
    func getDidDoc()  -> DidDoc
    
    func getDidMethodParameters()  -> [String: DidMethodParameter]
    
}
/**
 * A simple container for both `DidDoc` and the related collection of `DidMethodParameter` objects.
 */
open class DidDocExtended: DidDocExtendedProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_did_sidekicks_fn_clone_diddocextended(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_did_sidekicks_fn_free_diddocextended(pointer, $0) }
    }

    

    
open func getDidDoc() -> DidDoc  {
    return try!  FfiConverterTypeDidDoc_lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddocextended_get_did_doc(self.uniffiClonePointer(),$0
    )
})
}
    
open func getDidMethodParameters() -> [String: DidMethodParameter]  {
    return try!  FfiConverterDictionaryStringTypeDidMethodParameter.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_diddocextended_get_did_method_parameters(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidDocExtended: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DidDocExtended

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DidDocExtended {
        return DidDocExtended(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DidDocExtended) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidDocExtended {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DidDocExtended, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidDocExtended_lift(_ pointer: UnsafeMutableRawPointer) throws -> DidDocExtended {
    return try FfiConverterTypeDidDocExtended.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidDocExtended_lower(_ value: DidDocExtended) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDidDocExtended.lower(value)
}






/**
 * W.r.t. any of specification versions available at https://identity.foundation/didwebvh
 */
public protocol DidLogEntryJsonSchemaProtocol: AnyObject, Sendable {
    
    /**
     * Delivers a proper JSON schema (in UTF-8 format) fully describing a DID log entry.
     */
    func getJsonSchema()  -> String
    
}
/**
 * W.r.t. any of specification versions available at https://identity.foundation/didwebvh
 */
open class DidLogEntryJsonSchema: DidLogEntryJsonSchemaProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_did_sidekicks_fn_clone_didlogentryjsonschema(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_did_sidekicks_fn_free_didlogentryjsonschema(pointer, $0) }
    }

    

    
    /**
     * Delivers a proper JSON schema (in UTF-8 format) fully describing a DID log entry.
     */
open func getJsonSchema() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didlogentryjsonschema_get_json_schema(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidLogEntryJsonSchema: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DidLogEntryJsonSchema

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DidLogEntryJsonSchema {
        return DidLogEntryJsonSchema(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DidLogEntryJsonSchema) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidLogEntryJsonSchema {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DidLogEntryJsonSchema, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidLogEntryJsonSchema_lift(_ pointer: UnsafeMutableRawPointer) throws -> DidLogEntryJsonSchema {
    return try FfiConverterTypeDidLogEntryJsonSchema.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidLogEntryJsonSchema_lower(_ value: DidLogEntryJsonSchema) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDidLogEntryJsonSchema.lower(value)
}






/**
 * A compiled JSON Schema validator.
 *
 * This structure represents a JSON Schema that has been parsed and compiled into
 * an efficient internal representation for validation. It contains the root node
 * of the schema tree and the configuration options used during compilation.
 *
 * Intended to be used predominantly in conjunction with `DidLogEntryJsonSchema` trait implementations.
 */
public protocol DidLogEntryValidatorProtocol: AnyObject, Sendable {
    
    /**
     * Validate the supplied `instance` against the `schema` (supplied earlier via constructor).
     *
     * `DidLogEntryValidatorError` is returned as soon the very first validation error occurs.
     */
    func validate(instance: String) throws 
    
}
/**
 * A compiled JSON Schema validator.
 *
 * This structure represents a JSON Schema that has been parsed and compiled into
 * an efficient internal representation for validation. It contains the root node
 * of the schema tree and the configuration options used during compilation.
 *
 * Intended to be used predominantly in conjunction with `DidLogEntryJsonSchema` trait implementations.
 */
open class DidLogEntryValidator: DidLogEntryValidatorProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_did_sidekicks_fn_clone_didlogentryvalidator(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_did_sidekicks_fn_free_didlogentryvalidator(pointer, $0) }
    }

    
    /**
     * Create a new DID log entry JSON Schema validator using `JSON Schema Draft 2020-12` specifications and supplied `schema`.
     */
public static func from(schema: DidLogEntryJsonSchema) -> DidLogEntryValidator  {
    return try!  FfiConverterTypeDidLogEntryValidator_lift(try! rustCall() {
    uniffi_did_sidekicks_fn_constructor_didlogentryvalidator_from(
        FfiConverterTypeDidLogEntryJsonSchema_lower(schema),$0
    )
})
}
    

    
    /**
     * Validate the supplied `instance` against the `schema` (supplied earlier via constructor).
     *
     * `DidLogEntryValidatorError` is returned as soon the very first validation error occurs.
     */
open func validate(instance: String)throws   {try rustCallWithError(FfiConverterTypeDidLogEntryValidatorError_lift) {
    uniffi_did_sidekicks_fn_method_didlogentryvalidator_validate(self.uniffiClonePointer(),
        FfiConverterString.lower(instance),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidLogEntryValidator: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DidLogEntryValidator

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DidLogEntryValidator {
        return DidLogEntryValidator(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DidLogEntryValidator) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidLogEntryValidator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DidLogEntryValidator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidLogEntryValidator_lift(_ pointer: UnsafeMutableRawPointer) throws -> DidLogEntryValidator {
    return try FfiConverterTypeDidLogEntryValidator.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidLogEntryValidator_lower(_ value: DidLogEntryValidator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDidLogEntryValidator.lower(value)
}






/**
 * A generic DID method parameter as seen from the perspective of a JSON deserializer.
 *
 * The value returned by `DidMethodParameter`'s getter `get_json_text` is guaranteed to be deserializable back into a JSON object.
 */
public protocol DidMethodParameterProtocol: AnyObject, Sendable {
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_bool` returns `true`,
     * the getter is guaranteed to return a `bool` value.
     */
    func getBoolValue()  -> Bool?
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_f64` returns `true`,
     * the getter is guaranteed to return a `f64` value.
     */
    func getF64Value()  -> Double?
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_i64` returns `true`,
     * the getter is guaranteed to return a `i64` value.
     */
    func getI64Value()  -> Int64?
    
    func getJsonText()  -> String
    
    func getName()  -> String
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_string_array` returns `true`,
     * the getter is guaranteed to return a ``string array.
     */
    func getStringArrayValue()  -> [String]?
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_string` returns `true`,
     * the getter is guaranteed to return a `string` value.
     */
    func getStringValue()  -> String?
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_u64` returns `true`,
     * the getter is guaranteed to return a `u64` value.
     */
    func getU64Value()  -> UInt64?
    
    func isArray()  -> Bool
    
    func isBool()  -> Bool
    
    func isEmptyArray()  -> Bool
    
    func isF64()  -> Bool
    
    func isI64()  -> Bool
    
    func isNull()  -> Bool
    
    func isObject()  -> Bool
    
    func isString()  -> Bool
    
    func isStringArray()  -> Bool
    
    func isU64()  -> Bool
    
}
/**
 * A generic DID method parameter as seen from the perspective of a JSON deserializer.
 *
 * The value returned by `DidMethodParameter`'s getter `get_json_text` is guaranteed to be deserializable back into a JSON object.
 */
open class DidMethodParameter: DidMethodParameterProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_did_sidekicks_fn_clone_didmethodparameter(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_did_sidekicks_fn_free_didmethodparameter(pointer, $0) }
    }

    

    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_bool` returns `true`,
     * the getter is guaranteed to return a `bool` value.
     */
open func getBoolValue() -> Bool?  {
    return try!  FfiConverterOptionBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_get_bool_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_f64` returns `true`,
     * the getter is guaranteed to return a `f64` value.
     */
open func getF64Value() -> Double?  {
    return try!  FfiConverterOptionDouble.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_get_f64_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_i64` returns `true`,
     * the getter is guaranteed to return a `i64` value.
     */
open func getI64Value() -> Int64?  {
    return try!  FfiConverterOptionInt64.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_get_i64_value(self.uniffiClonePointer(),$0
    )
})
}
    
open func getJsonText() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_get_json_text(self.uniffiClonePointer(),$0
    )
})
}
    
open func getName() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_get_name(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_string_array` returns `true`,
     * the getter is guaranteed to return a ``string array.
     */
open func getStringArrayValue() -> [String]?  {
    return try!  FfiConverterOptionSequenceString.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_get_string_array_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_string` returns `true`,
     * the getter is guaranteed to return a `string` value.
     */
open func getStringValue() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_get_string_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * For any `DidMethodParameter` on which `DidMethodParameter::is_u64` returns `true`,
     * the getter is guaranteed to return a `u64` value.
     */
open func getU64Value() -> UInt64?  {
    return try!  FfiConverterOptionUInt64.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_get_u64_value(self.uniffiClonePointer(),$0
    )
})
}
    
open func isArray() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_array(self.uniffiClonePointer(),$0
    )
})
}
    
open func isBool() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_bool(self.uniffiClonePointer(),$0
    )
})
}
    
open func isEmptyArray() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_empty_array(self.uniffiClonePointer(),$0
    )
})
}
    
open func isF64() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_f64(self.uniffiClonePointer(),$0
    )
})
}
    
open func isI64() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_i64(self.uniffiClonePointer(),$0
    )
})
}
    
open func isNull() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_null(self.uniffiClonePointer(),$0
    )
})
}
    
open func isObject() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_object(self.uniffiClonePointer(),$0
    )
})
}
    
open func isString() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_string(self.uniffiClonePointer(),$0
    )
})
}
    
open func isStringArray() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_string_array(self.uniffiClonePointer(),$0
    )
})
}
    
open func isU64() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_did_sidekicks_fn_method_didmethodparameter_is_u64(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidMethodParameter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DidMethodParameter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DidMethodParameter {
        return DidMethodParameter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DidMethodParameter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidMethodParameter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DidMethodParameter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidMethodParameter_lift(_ pointer: UnsafeMutableRawPointer) throws -> DidMethodParameter {
    return try FfiConverterTypeDidMethodParameter.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidMethodParameter_lower(_ value: DidMethodParameter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDidMethodParameter.lower(value)
}




public struct Jwk {
    public var alg: String?
    public var kid: String?
    public var kty: String?
    public var crv: String?
    public var x: String?
    public var y: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(alg: String?, kid: String?, kty: String?, crv: String?, x: String?, y: String?) {
        self.alg = alg
        self.kid = kid
        self.kty = kty
        self.crv = crv
        self.x = x
        self.y = y
    }
}

#if compiler(>=6)
extension Jwk: Sendable {}
#endif


extension Jwk: Equatable, Hashable {
    public static func ==(lhs: Jwk, rhs: Jwk) -> Bool {
        if lhs.alg != rhs.alg {
            return false
        }
        if lhs.kid != rhs.kid {
            return false
        }
        if lhs.kty != rhs.kty {
            return false
        }
        if lhs.crv != rhs.crv {
            return false
        }
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(alg)
        hasher.combine(kid)
        hasher.combine(kty)
        hasher.combine(crv)
        hasher.combine(x)
        hasher.combine(y)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeJwk: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Jwk {
        return
            try Jwk(
                alg: FfiConverterOptionString.read(from: &buf), 
                kid: FfiConverterOptionString.read(from: &buf), 
                kty: FfiConverterOptionString.read(from: &buf), 
                crv: FfiConverterOptionString.read(from: &buf), 
                x: FfiConverterOptionString.read(from: &buf), 
                y: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: Jwk, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.alg, into: &buf)
        FfiConverterOptionString.write(value.kid, into: &buf)
        FfiConverterOptionString.write(value.kty, into: &buf)
        FfiConverterOptionString.write(value.crv, into: &buf)
        FfiConverterOptionString.write(value.x, into: &buf)
        FfiConverterOptionString.write(value.y, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeJwk_lift(_ buf: RustBuffer) throws -> Jwk {
    return try FfiConverterTypeJwk.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeJwk_lower(_ value: Jwk) -> RustBuffer {
    return FfiConverterTypeJwk.lower(value)
}


public struct VerificationMethod {
    public var id: String
    public var controller: String
    public var verificationType: VerificationType
    public var publicKeyMultibase: String?
    public var publicKeyJwk: Jwk?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, controller: String, verificationType: VerificationType, publicKeyMultibase: String?, publicKeyJwk: Jwk?) {
        self.id = id
        self.controller = controller
        self.verificationType = verificationType
        self.publicKeyMultibase = publicKeyMultibase
        self.publicKeyJwk = publicKeyJwk
    }
}

#if compiler(>=6)
extension VerificationMethod: Sendable {}
#endif


extension VerificationMethod: Equatable, Hashable {
    public static func ==(lhs: VerificationMethod, rhs: VerificationMethod) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.controller != rhs.controller {
            return false
        }
        if lhs.verificationType != rhs.verificationType {
            return false
        }
        if lhs.publicKeyMultibase != rhs.publicKeyMultibase {
            return false
        }
        if lhs.publicKeyJwk != rhs.publicKeyJwk {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(controller)
        hasher.combine(verificationType)
        hasher.combine(publicKeyMultibase)
        hasher.combine(publicKeyJwk)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVerificationMethod: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerificationMethod {
        return
            try VerificationMethod(
                id: FfiConverterString.read(from: &buf), 
                controller: FfiConverterString.read(from: &buf), 
                verificationType: FfiConverterTypeVerificationType.read(from: &buf), 
                publicKeyMultibase: FfiConverterOptionString.read(from: &buf), 
                publicKeyJwk: FfiConverterOptionTypeJwk.read(from: &buf)
        )
    }

    public static func write(_ value: VerificationMethod, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.controller, into: &buf)
        FfiConverterTypeVerificationType.write(value.verificationType, into: &buf)
        FfiConverterOptionString.write(value.publicKeyMultibase, into: &buf)
        FfiConverterOptionTypeJwk.write(value.publicKeyJwk, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVerificationMethod_lift(_ buf: RustBuffer) throws -> VerificationMethod {
    return try FfiConverterTypeVerificationMethod.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVerificationMethod_lower(_ value: VerificationMethod) -> RustBuffer {
    return FfiConverterTypeVerificationMethod.lower(value)
}


/**
 * Represents any error condition that might occur in conjunction with `DidLogEntryValidator`
 */
public enum DidLogEntryValidatorError: Swift.Error {

    
    
    /**
     * The supplied JSON `instance` is not a valid DID log.
     */
    case ValidationError(message: String)
    
    /**
     * The supplied JSON `instance` cannot be deserialized.
     */
    case DeserializationError(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidLogEntryValidatorError: FfiConverterRustBuffer {
    typealias SwiftType = DidLogEntryValidatorError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidLogEntryValidatorError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ValidationError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .DeserializationError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DidLogEntryValidatorError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .ValidationError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .DeserializationError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidLogEntryValidatorError_lift(_ buf: RustBuffer) throws -> DidLogEntryValidatorError {
    return try FfiConverterTypeDidLogEntryValidatorError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidLogEntryValidatorError_lower(_ value: DidLogEntryValidatorError) -> RustBuffer {
    return FfiConverterTypeDidLogEntryValidatorError.lower(value)
}


extension DidLogEntryValidatorError: Equatable, Hashable {}




extension DidLogEntryValidatorError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





/**
 * The error accompanying any `DidResolver` implementation.
 * It might occur while calling `DidResolver` methods.
 */
public enum DidResolverError: Swift.Error {

    
    
    /**
     * Invalid method-specific identifier.
     */
    case InvalidMethodSpecificId(message: String)
    
    /**
     * Failed to serialize DID document (to JSON).
     */
    case SerializationFailed(message: String)
    
    /**
     * The supplied DID document is invalid or contains an argument which isn't part of the did specification/recommendation.
     */
    case DeserializationFailed(message: String)
    
    /**
     * Invalid DID parameter.
     */
    case InvalidDidParameter(message: String)
    
    /**
     * Invalid DID document.
     */
    case InvalidDidDocument(message: String)
    
    /**
     * Invalid DID log integration proof.
     */
    case InvalidDataIntegrityProof(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidResolverError: FfiConverterRustBuffer {
    typealias SwiftType = DidResolverError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidResolverError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidMethodSpecificId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .SerializationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .DeserializationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .InvalidDidParameter(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .InvalidDidDocument(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .InvalidDataIntegrityProof(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DidResolverError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InvalidMethodSpecificId(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .SerializationFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .DeserializationFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .InvalidDidParameter(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .InvalidDidDocument(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .InvalidDataIntegrityProof(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidResolverError_lift(_ buf: RustBuffer) throws -> DidResolverError {
    return try FfiConverterTypeDidResolverError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidResolverError_lower(_ value: DidResolverError) -> RustBuffer {
    return FfiConverterTypeDidResolverError.lower(value)
}


extension DidResolverError: Equatable, Hashable {}




extension DidResolverError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





/**
 * The error accompanying this crate.
 */
public enum DidSidekicksError: Swift.Error {

    
    
    /**
     * Failed to serialize DID document (to JSON).
     */
    case SerializationFailed(message: String)
    
    /**
     * The supplied did doc is invalid or contains an argument which isn't part of the did specification/recommendation.
     */
    case DeserializationFailed(message: String)
    
    /**
     * Invalid DID document.
     */
    case InvalidDidDocument(message: String)
    
    /**
     * Invalid DID log integration proof.
     */
    case InvalidDataIntegrityProof(message: String)
    
    /**
     * Invalid DID method parameter
     */
    case InvalidDidMethodParameter(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidSidekicksError: FfiConverterRustBuffer {
    typealias SwiftType = DidSidekicksError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidSidekicksError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .SerializationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .DeserializationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .InvalidDidDocument(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .InvalidDataIntegrityProof(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .InvalidDidMethodParameter(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DidSidekicksError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .SerializationFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .DeserializationFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .InvalidDidDocument(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .InvalidDataIntegrityProof(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .InvalidDidMethodParameter(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidSidekicksError_lift(_ buf: RustBuffer) throws -> DidSidekicksError {
    return try FfiConverterTypeDidSidekicksError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDidSidekicksError_lower(_ value: DidSidekicksError) -> RustBuffer {
    return FfiConverterTypeDidSidekicksError.lower(value)
}


extension DidSidekicksError: Equatable, Hashable {}




extension DidSidekicksError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum VerificationType {
    
    case multikey
    case jsonWebKey2020
    case ed25519VerificationKey2020
}


#if compiler(>=6)
extension VerificationType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVerificationType: FfiConverterRustBuffer {
    typealias SwiftType = VerificationType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerificationType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .multikey
        
        case 2: return .jsonWebKey2020
        
        case 3: return .ed25519VerificationKey2020
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VerificationType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .multikey:
            writeInt(&buf, Int32(1))
        
        
        case .jsonWebKey2020:
            writeInt(&buf, Int32(2))
        
        
        case .ed25519VerificationKey2020:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVerificationType_lift(_ buf: RustBuffer) throws -> VerificationType {
    return try FfiConverterTypeVerificationType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVerificationType_lower(_ value: VerificationType) -> RustBuffer {
    return FfiConverterTypeVerificationType.lower(value)
}


extension VerificationType: Equatable, Hashable {}






#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionInt64: FfiConverterRustBuffer {
    typealias SwiftType = Int64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeJwk: FfiConverterRustBuffer {
    typealias SwiftType = Jwk?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeJwk.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeJwk.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeVerificationMethod: FfiConverterRustBuffer {
    typealias SwiftType = [VerificationMethod]

    public static func write(_ value: [VerificationMethod], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeVerificationMethod.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [VerificationMethod] {
        let len: Int32 = try readInt(&buf)
        var seq = [VerificationMethod]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeVerificationMethod.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringTypeDidMethodParameter: FfiConverterRustBuffer {
    public static func write(_ value: [String: DidMethodParameter], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeDidMethodParameter.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: DidMethodParameter] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: DidMethodParameter]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeDidMethodParameter.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_did_sidekicks_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddoc_get_assertion_method() != 15810) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddoc_get_authentication() != 32973) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddoc_get_capability_delegation() != 37661) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddoc_get_capability_invocation() != 55778) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddoc_get_context() != 58325) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddoc_get_controller() != 37037) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddoc_get_deactivated() != 2048) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddoc_get_id() != 6137) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddoc_get_verification_method() != 62805) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddocextended_get_did_doc() != 63079) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_diddocextended_get_did_method_parameters() != 42171) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didlogentryjsonschema_get_json_schema() != 34604) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didlogentryvalidator_validate() != 32770) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_get_bool_value() != 2225) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_get_f64_value() != 59134) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_get_i64_value() != 38334) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_get_json_text() != 13794) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_get_name() != 39654) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_get_string_array_value() != 219) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_get_string_value() != 24640) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_get_u64_value() != 59207) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_array() != 11830) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_bool() != 64930) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_empty_array() != 30471) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_f64() != 58071) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_i64() != 4508) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_null() != 26721) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_object() != 6033) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_string() != 34423) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_string_array() != 16699) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_method_didmethodparameter_is_u64() != 29426) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_constructor_diddoc_from_json() != 34742) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_did_sidekicks_checksum_constructor_didlogentryvalidator_from() != 35475) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureDidSidekicksInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all