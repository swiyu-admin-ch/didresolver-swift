// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(didtoolboxFFI)
    import didtoolboxFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_didtoolbox_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_didtoolbox_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol DidDocProtocol: AnyObject {
    func getAssertionMethod() -> [VerificationMethod]

    func getAuthentication() -> [VerificationMethod]

    func getCapabilityDelegation() -> [VerificationMethod]

    func getCapabilityInvocation() -> [VerificationMethod]

    func getContext() -> [String]

    func getController() -> [String]

    func getDeactivated() -> Bool

    func getId() -> String

    func getVerificationMethod() -> [VerificationMethod]
}

open class DidDoc:
    DidDocProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_didtoolbox_fn_clone_diddoc(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_didtoolbox_fn_free_diddoc(pointer, $0) }
    }

    public static func fromJson(jsonContent: String) throws -> DidDoc {
        return try FfiConverterTypeDidDoc.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_constructor_diddoc_from_json(
                FfiConverterString.lower(jsonContent), $0
            )
        })
    }

    open func getAssertionMethod() -> [VerificationMethod] {
        return try! FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_diddoc_get_assertion_method(self.uniffiClonePointer(), $0)
        })
    }

    open func getAuthentication() -> [VerificationMethod] {
        return try! FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_diddoc_get_authentication(self.uniffiClonePointer(), $0)
        })
    }

    open func getCapabilityDelegation() -> [VerificationMethod] {
        return try! FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_diddoc_get_capability_delegation(self.uniffiClonePointer(), $0)
        })
    }

    open func getCapabilityInvocation() -> [VerificationMethod] {
        return try! FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_diddoc_get_capability_invocation(self.uniffiClonePointer(), $0)
        })
    }

    open func getContext() -> [String] {
        return try! FfiConverterSequenceString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_diddoc_get_context(self.uniffiClonePointer(), $0)
        })
    }

    open func getController() -> [String] {
        return try! FfiConverterSequenceString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_diddoc_get_controller(self.uniffiClonePointer(), $0)
        })
    }

    open func getDeactivated() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_diddoc_get_deactivated(self.uniffiClonePointer(), $0)
        })
    }

    open func getId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_diddoc_get_id(self.uniffiClonePointer(), $0)
        })
    }

    open func getVerificationMethod() -> [VerificationMethod] {
        return try! FfiConverterSequenceTypeVerificationMethod.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_diddoc_get_verification_method(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidDoc: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DidDoc

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DidDoc {
        return DidDoc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DidDoc) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidDoc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DidDoc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDidDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> DidDoc {
    return try FfiConverterTypeDidDoc.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDidDoc_lower(_ value: DidDoc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDidDoc.lower(value)
}

public protocol DidDocumentStateProtocol: AnyObject {
    func validate() throws -> DidDoc

    func validateWithScid(scid: String?) throws -> DidDoc
}

open class DidDocumentState:
    DidDocumentStateProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_didtoolbox_fn_clone_diddocumentstate(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_didtoolbox_fn_free_diddocumentstate(pointer, $0) }
    }

    public static func from(didLog: String) throws -> DidDocumentState {
        return try FfiConverterTypeDidDocumentState.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_constructor_diddocumentstate_from(
                FfiConverterString.lower(didLog), $0
            )
        })
    }

    open func validate() throws -> DidDoc {
        return try FfiConverterTypeDidDoc.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_method_diddocumentstate_validate(self.uniffiClonePointer(), $0)
        })
    }

    open func validateWithScid(scid: String?) throws -> DidDoc {
        return try FfiConverterTypeDidDoc.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_method_diddocumentstate_validate_with_scid(self.uniffiClonePointer(),
                                                                            FfiConverterOptionString.lower(scid), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDidDocumentState: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DidDocumentState

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DidDocumentState {
        return DidDocumentState(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DidDocumentState) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidDocumentState {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DidDocumentState, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDidDocumentState_lift(_ pointer: UnsafeMutableRawPointer) throws -> DidDocumentState {
    return try FfiConverterTypeDidDocumentState.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDidDocumentState_lower(_ value: DidDocumentState) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDidDocumentState.lower(value)
}

public protocol Ed25519KeyPairProtocol: AnyObject {
    func getSigningKey() -> Ed25519SigningKey

    func getVerifyingKey() -> Ed25519VerifyingKey

    func sign(message: String) -> Ed25519Signature
}

open class Ed25519KeyPair:
    Ed25519KeyPairProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_didtoolbox_fn_clone_ed25519keypair(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_didtoolbox_fn_free_ed25519keypair(pointer, $0) }
    }

    public static func from(signingKeyMultibase: String) throws -> Ed25519KeyPair {
        return try FfiConverterTypeEd25519KeyPair.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_constructor_ed25519keypair_from(
                FfiConverterString.lower(signingKeyMultibase), $0
            )
        })
    }

    public static func generate() -> Ed25519KeyPair {
        return try! FfiConverterTypeEd25519KeyPair.lift(try! rustCall {
            uniffi_didtoolbox_fn_constructor_ed25519keypair_generate($0
            )
        })
    }

    open func getSigningKey() -> Ed25519SigningKey {
        return try! FfiConverterTypeEd25519SigningKey.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_ed25519keypair_get_signing_key(self.uniffiClonePointer(), $0)
        })
    }

    open func getVerifyingKey() -> Ed25519VerifyingKey {
        return try! FfiConverterTypeEd25519VerifyingKey.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_ed25519keypair_get_verifying_key(self.uniffiClonePointer(), $0)
        })
    }

    open func sign(message: String) -> Ed25519Signature {
        return try! FfiConverterTypeEd25519Signature.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_ed25519keypair_sign(self.uniffiClonePointer(),
                                                            FfiConverterString.lower(message), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeEd25519KeyPair: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Ed25519KeyPair

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Ed25519KeyPair {
        return Ed25519KeyPair(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Ed25519KeyPair) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ed25519KeyPair {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Ed25519KeyPair, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519KeyPair_lift(_ pointer: UnsafeMutableRawPointer) throws -> Ed25519KeyPair {
    return try FfiConverterTypeEd25519KeyPair.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519KeyPair_lower(_ value: Ed25519KeyPair) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEd25519KeyPair.lower(value)
}

public protocol Ed25519SignatureProtocol: AnyObject {
    func toMultibase() -> String
}

open class Ed25519Signature:
    Ed25519SignatureProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_didtoolbox_fn_clone_ed25519signature(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_didtoolbox_fn_free_ed25519signature(pointer, $0) }
    }

    public static func fromMultibase(multibase: String) throws -> Ed25519Signature {
        return try FfiConverterTypeEd25519Signature.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_constructor_ed25519signature_from_multibase(
                FfiConverterString.lower(multibase), $0
            )
        })
    }

    open func toMultibase() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_ed25519signature_to_multibase(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeEd25519Signature: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Ed25519Signature

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Ed25519Signature {
        return Ed25519Signature(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Ed25519Signature) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ed25519Signature {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Ed25519Signature, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519Signature_lift(_ pointer: UnsafeMutableRawPointer) throws -> Ed25519Signature {
    return try FfiConverterTypeEd25519Signature.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519Signature_lower(_ value: Ed25519Signature) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEd25519Signature.lower(value)
}

public protocol Ed25519SigningKeyProtocol: AnyObject {
    func toMultibase() -> String
}

open class Ed25519SigningKey:
    Ed25519SigningKeyProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_didtoolbox_fn_clone_ed25519signingkey(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_didtoolbox_fn_free_ed25519signingkey(pointer, $0) }
    }

    public static func fromMultibase(multibase: String) throws -> Ed25519SigningKey {
        return try FfiConverterTypeEd25519SigningKey.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_constructor_ed25519signingkey_from_multibase(
                FfiConverterString.lower(multibase), $0
            )
        })
    }

    open func toMultibase() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_ed25519signingkey_to_multibase(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeEd25519SigningKey: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Ed25519SigningKey

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Ed25519SigningKey {
        return Ed25519SigningKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Ed25519SigningKey) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ed25519SigningKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Ed25519SigningKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519SigningKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> Ed25519SigningKey {
    return try FfiConverterTypeEd25519SigningKey.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519SigningKey_lower(_ value: Ed25519SigningKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEd25519SigningKey.lower(value)
}

public protocol Ed25519VerifyingKeyProtocol: AnyObject {
    func toMultibase() -> String
}

open class Ed25519VerifyingKey:
    Ed25519VerifyingKeyProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_didtoolbox_fn_clone_ed25519verifyingkey(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_didtoolbox_fn_free_ed25519verifyingkey(pointer, $0) }
    }

    public static func fromMultibase(multibase: String) throws -> Ed25519VerifyingKey {
        return try FfiConverterTypeEd25519VerifyingKey.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_constructor_ed25519verifyingkey_from_multibase(
                FfiConverterString.lower(multibase), $0
            )
        })
    }

    open func toMultibase() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_ed25519verifyingkey_to_multibase(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeEd25519VerifyingKey: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Ed25519VerifyingKey

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Ed25519VerifyingKey {
        return Ed25519VerifyingKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Ed25519VerifyingKey) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ed25519VerifyingKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Ed25519VerifyingKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519VerifyingKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> Ed25519VerifyingKey {
    return try FfiConverterTypeEd25519VerifyingKey.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519VerifyingKey_lower(_ value: Ed25519VerifyingKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEd25519VerifyingKey.lower(value)
}

public protocol TrustDidWebProtocol: AnyObject {
    func getDid() -> String

    func getDidDoc() -> String

    func getDidDocObj() throws -> DidDoc

    func getDidLog() -> String
}

open class TrustDidWeb:
    TrustDidWebProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_didtoolbox_fn_clone_trustdidweb(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_didtoolbox_fn_free_trustdidweb(pointer, $0) }
    }

    public static func read(didTdw: String, didLog: String) throws -> TrustDidWeb {
        return try FfiConverterTypeTrustDidWeb.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_constructor_trustdidweb_read(
                FfiConverterString.lower(didTdw),
                FfiConverterString.lower(didLog), $0
            )
        })
    }

    open func getDid() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_trustdidweb_get_did(self.uniffiClonePointer(), $0)
        })
    }

    open func getDidDoc() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_trustdidweb_get_did_doc(self.uniffiClonePointer(), $0)
        })
    }

    open func getDidDocObj() throws -> DidDoc {
        return try FfiConverterTypeDidDoc.lift(rustCallWithError(FfiConverterTypeTrustDidWebError.lift) {
            uniffi_didtoolbox_fn_method_trustdidweb_get_did_doc_obj(self.uniffiClonePointer(), $0)
        })
    }

    open func getDidLog() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_trustdidweb_get_did_log(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTrustDidWeb: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TrustDidWeb

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TrustDidWeb {
        return TrustDidWeb(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TrustDidWeb) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrustDidWeb {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TrustDidWeb, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTrustDidWeb_lift(_ pointer: UnsafeMutableRawPointer) throws -> TrustDidWeb {
    return try FfiConverterTypeTrustDidWeb.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTrustDidWeb_lower(_ value: TrustDidWeb) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTrustDidWeb.lower(value)
}

/**
 * Represents a TDW DID, as specified at https://identity.foundation/trustdidweb/#method-specific-identifier:
 *
 * "The did:tdw method-specific identifier contains both the self-certifying identifier (SCID) for the DID,
 * and a fully qualified domain name (with an optional path) that is secured by a TLS/SSL certificate."
 */
public protocol TrustDidWebIdProtocol: AnyObject {
    /**
     * Returns the SCID part from the supplied DID.
     */
    func getScid() -> String

    /**
     * Returns the url part from the supplied TDW DID.
     */
    func getUrl() -> String
}

/**
 * Represents a TDW DID, as specified at https://identity.foundation/trustdidweb/#method-specific-identifier:
 *
 * "The did:tdw method-specific identifier contains both the self-certifying identifier (SCID) for the DID,
 * and a fully qualified domain name (with an optional path) that is secured by a TLS/SSL certificate."
 */
open class TrustDidWebId:
    TrustDidWebIdProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_didtoolbox_fn_clone_trustdidwebid(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_didtoolbox_fn_free_trustdidwebid(pointer, $0) }
    }

    /**
     * The only (non-empty) constructor in charge of DID parsing.
     *
     * CAUTION Calling any of the available getters should take place after this method is called, not earlier.
     */
    public static func parseDidTdw(didTdw: String) throws -> TrustDidWebId {
        return try FfiConverterTypeTrustDidWebId.lift(rustCallWithError(FfiConverterTypeTrustDidWebIdResolutionError.lift) {
            uniffi_didtoolbox_fn_constructor_trustdidwebid_parse_did_tdw(
                FfiConverterString.lower(didTdw), $0
            )
        })
    }

    /**
     * Returns the SCID part from the supplied DID.
     */
    open func getScid() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_trustdidwebid_get_scid(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Returns the url part from the supplied TDW DID.
     */
    open func getUrl() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_didtoolbox_fn_method_trustdidwebid_get_url(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTrustDidWebId: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TrustDidWebId

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TrustDidWebId {
        return TrustDidWebId(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TrustDidWebId) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrustDidWebId {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TrustDidWebId, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTrustDidWebId_lift(_ pointer: UnsafeMutableRawPointer) throws -> TrustDidWebId {
    return try FfiConverterTypeTrustDidWebId.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTrustDidWebId_lower(_ value: TrustDidWebId) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTrustDidWebId.lower(value)
}

public struct Jwk {
    public var alg: String?
    public var kid: String?
    public var kty: String?
    public var crv: String?
    public var x: String?
    public var y: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(alg: String?, kid: String?, kty: String?, crv: String?, x: String?, y: String?) {
        self.alg = alg
        self.kid = kid
        self.kty = kty
        self.crv = crv
        self.x = x
        self.y = y
    }
}

extension Jwk: Equatable, Hashable {
    public static func == (lhs: Jwk, rhs: Jwk) -> Bool {
        if lhs.alg != rhs.alg {
            return false
        }
        if lhs.kid != rhs.kid {
            return false
        }
        if lhs.kty != rhs.kty {
            return false
        }
        if lhs.crv != rhs.crv {
            return false
        }
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(alg)
        hasher.combine(kid)
        hasher.combine(kty)
        hasher.combine(crv)
        hasher.combine(x)
        hasher.combine(y)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeJwk: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Jwk {
        return
            try Jwk(
                alg: FfiConverterOptionString.read(from: &buf),
                kid: FfiConverterOptionString.read(from: &buf),
                kty: FfiConverterOptionString.read(from: &buf),
                crv: FfiConverterOptionString.read(from: &buf),
                x: FfiConverterOptionString.read(from: &buf),
                y: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: Jwk, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.alg, into: &buf)
        FfiConverterOptionString.write(value.kid, into: &buf)
        FfiConverterOptionString.write(value.kty, into: &buf)
        FfiConverterOptionString.write(value.crv, into: &buf)
        FfiConverterOptionString.write(value.x, into: &buf)
        FfiConverterOptionString.write(value.y, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeJwk_lift(_ buf: RustBuffer) throws -> Jwk {
    return try FfiConverterTypeJwk.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeJwk_lower(_ value: Jwk) -> RustBuffer {
    return FfiConverterTypeJwk.lower(value)
}

public struct VerificationMethod {
    public var id: String
    public var controller: String
    public var verificationType: VerificationType
    public var publicKeyMultibase: String?
    public var publicKeyJwk: Jwk?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, controller: String, verificationType: VerificationType, publicKeyMultibase: String?, publicKeyJwk: Jwk?) {
        self.id = id
        self.controller = controller
        self.verificationType = verificationType
        self.publicKeyMultibase = publicKeyMultibase
        self.publicKeyJwk = publicKeyJwk
    }
}

extension VerificationMethod: Equatable, Hashable {
    public static func == (lhs: VerificationMethod, rhs: VerificationMethod) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.controller != rhs.controller {
            return false
        }
        if lhs.verificationType != rhs.verificationType {
            return false
        }
        if lhs.publicKeyMultibase != rhs.publicKeyMultibase {
            return false
        }
        if lhs.publicKeyJwk != rhs.publicKeyJwk {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(controller)
        hasher.combine(verificationType)
        hasher.combine(publicKeyMultibase)
        hasher.combine(publicKeyJwk)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeVerificationMethod: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerificationMethod {
        return
            try VerificationMethod(
                id: FfiConverterString.read(from: &buf),
                controller: FfiConverterString.read(from: &buf),
                verificationType: FfiConverterTypeVerificationType.read(from: &buf),
                publicKeyMultibase: FfiConverterOptionString.read(from: &buf),
                publicKeyJwk: FfiConverterOptionTypeJwk.read(from: &buf)
            )
    }

    public static func write(_ value: VerificationMethod, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.controller, into: &buf)
        FfiConverterTypeVerificationType.write(value.verificationType, into: &buf)
        FfiConverterOptionString.write(value.publicKeyMultibase, into: &buf)
        FfiConverterOptionTypeJwk.write(value.publicKeyJwk, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVerificationMethod_lift(_ buf: RustBuffer) throws -> VerificationMethod {
    return try FfiConverterTypeVerificationMethod.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVerificationMethod_lower(_ value: VerificationMethod) -> RustBuffer {
    return FfiConverterTypeVerificationMethod.lower(value)
}

/**
 * The error accompanying TrustDidWeb.
 * It might occur while calling TrustDidWeb methods.
 */
public enum TrustDidWebError {
    /**
     * DID method is not supported by this resolver.
     */
    case MethodNotSupported(message: String)

    /**
     * Invalid method-specific identifier.
     */
    case InvalidMethodSpecificId(message: String)

    /**
     * Failed to serialize DID document (to JSON).
     */
    case SerializationFailed(message: String)

    /**
     * The supplied did doc is invalid or contains an argument which isn't part of the did specification/recommendation.
     */
    case DeserializationFailed(message: String)

    /**
     * Invalid (or not yet supported) operation against DID doc.
     */
    case InvalidOperation(message: String)

    /**
     * Invalid DID parameter.
     */
    case InvalidDidParameter(message: String)

    /**
     * Invalid DID document.
     */
    case InvalidDidDocument(message: String)

    /**
     * Invalid DID log integration proof.
     */
    case InvalidDataIntegrityProof(message: String)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTrustDidWebError: FfiConverterRustBuffer {
    typealias SwiftType = TrustDidWebError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrustDidWebError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .MethodNotSupported(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .InvalidMethodSpecificId(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .SerializationFailed(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .DeserializationFailed(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .InvalidOperation(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .InvalidDidParameter(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .InvalidDidDocument(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .InvalidDataIntegrityProof(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TrustDidWebError, into buf: inout [UInt8]) {
        switch value {
        case .MethodNotSupported(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .InvalidMethodSpecificId(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        case .SerializationFailed(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(3))
        case .DeserializationFailed(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(4))
        case .InvalidOperation(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(5))
        case .InvalidDidParameter(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(6))
        case .InvalidDidDocument(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(7))
        case .InvalidDataIntegrityProof(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(8))
        }
    }
}

extension TrustDidWebError: Equatable, Hashable {}

extension TrustDidWebError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

/**
 * The error accompanying TrustDidWebId.
 * It might occur while calling TrustDidWebId methods.
 */
public enum TrustDidWebIdResolutionError {
    /**
     * DID method is not supported by this resolver.
     */
    case MethodNotSupported(message: String)

    /**
     * Invalid method-specific identifier.
     */
    case InvalidMethodSpecificId(message: String)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTrustDidWebIdResolutionError: FfiConverterRustBuffer {
    typealias SwiftType = TrustDidWebIdResolutionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrustDidWebIdResolutionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .MethodNotSupported(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .InvalidMethodSpecificId(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TrustDidWebIdResolutionError, into buf: inout [UInt8]) {
        switch value {
        case .MethodNotSupported(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .InvalidMethodSpecificId(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        }
    }
}

extension TrustDidWebIdResolutionError: Equatable, Hashable {}

extension TrustDidWebIdResolutionError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum VerificationType {
    case multikey
    case jsonWebKey2020
    case ed25519VerificationKey2020
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeVerificationType: FfiConverterRustBuffer {
    typealias SwiftType = VerificationType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerificationType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .multikey

        case 2: return .jsonWebKey2020

        case 3: return .ed25519VerificationKey2020

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VerificationType, into buf: inout [UInt8]) {
        switch value {
        case .multikey:
            writeInt(&buf, Int32(1))

        case .jsonWebKey2020:
            writeInt(&buf, Int32(2))

        case .ed25519VerificationKey2020:
            writeInt(&buf, Int32(3))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVerificationType_lift(_ buf: RustBuffer) throws -> VerificationType {
    return try FfiConverterTypeVerificationType.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVerificationType_lower(_ value: VerificationType) -> RustBuffer {
    return FfiConverterTypeVerificationType.lower(value)
}

extension VerificationType: Equatable, Hashable {}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeJwk: FfiConverterRustBuffer {
    typealias SwiftType = Jwk?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeJwk.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeJwk.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeVerificationMethod: FfiConverterRustBuffer {
    typealias SwiftType = [VerificationMethod]

    public static func write(_ value: [VerificationMethod], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeVerificationMethod.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [VerificationMethod] {
        let len: Int32 = try readInt(&buf)
        var seq = [VerificationMethod]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeVerificationMethod.read(from: &buf))
        }
        return seq
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_didtoolbox_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddoc_get_assertion_method() != 29913 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddoc_get_authentication() != 34911 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddoc_get_capability_delegation() != 44865 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddoc_get_capability_invocation() != 43621 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddoc_get_context() != 52581 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddoc_get_controller() != 58020 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddoc_get_deactivated() != 33246 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddoc_get_id() != 59954 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddoc_get_verification_method() != 46020 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddocumentstate_validate() != 13040 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_diddocumentstate_validate_with_scid() != 12771 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_ed25519keypair_get_signing_key() != 65401 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_ed25519keypair_get_verifying_key() != 31026 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_ed25519keypair_sign() != 30995 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_ed25519signature_to_multibase() != 52563 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_ed25519signingkey_to_multibase() != 25405 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_ed25519verifyingkey_to_multibase() != 25116 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_trustdidweb_get_did() != 41881 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_trustdidweb_get_did_doc() != 27888 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_trustdidweb_get_did_doc_obj() != 44965 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_trustdidweb_get_did_log() != 54432 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_trustdidwebid_get_scid() != 12254 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_method_trustdidwebid_get_url() != 17624 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_constructor_diddoc_from_json() != 11336 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_constructor_diddocumentstate_from() != 16384 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_constructor_ed25519keypair_from() != 7785 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_constructor_ed25519keypair_generate() != 54771 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_constructor_ed25519signature_from_multibase() != 26554 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_constructor_ed25519signingkey_from_multibase() != 935 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_constructor_ed25519verifyingkey_from_multibase() != 9783 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_constructor_trustdidweb_read() != 32708 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didtoolbox_checksum_constructor_trustdidwebid_parse_did_tdw() != 44898 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
